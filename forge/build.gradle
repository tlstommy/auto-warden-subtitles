plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "autowardensubtitles.mixins.json"
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    //forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"
    //implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {

    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,forge_version_range: forge_version_range,loader_version_range: loader_version_range,
            mod_id: archives_base_name, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,src_url: src_url,
    ]

    inputs.properties replaceProperties

    filesMatching("META-INF/mods.toml") {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile

}

/*
publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
*/